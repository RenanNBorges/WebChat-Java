server:
  port: 8080

spring:
  application:
    name: webchat-backend

  # ❌ A secção "profiles: active: dev" foi removida daqui para evitar conflitos.

  # Configurações padrão que podem ser sobrescritas pelos perfis.
  datasource:
    url: jdbc:postgresql://localhost:5432/webchat
    username: postgres
    password: root
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        # A propriedade do dialeto foi removida, pois o Spring Boot a deteta automaticamente.
        format_sql: true

  redis:
    host: localhost
    port: 6379
    timeout: 60000
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

  rabbitmq:
    host: localhost
    port: 5672
    username: webchat
    password: webchat123

  security:
    jwt:
      secret: bDRPOXpKOHBHLWhXYlZuWW1YcVp0N3cxeFI0Z0NfZUYyb0s1c042dUkxRT0=
      expiration: 86400000 # 24 horas

logging:
  level:
    com.webchat: DEBUG
    org.springframework.web.socket: DEBUG
    org.springframework.security: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

app:
  cors:
    allowed-origins: http://localhost:3000,http://192.168.0.181:3000,http://localhost:3001
  websocket:
    allowed-origins: http://localhost:3000,http://192.168.0.181:3000,http://localhost:3001
  chat:
    max-group-size: 11
    message-history-limit: 1000

---
# Profile para desenvolvimento (ativado ao correr localmente sem especificar um perfil)
spring:
  config:
    activate:
      on-profile: dev
  jpa:
    hibernate:
      ddl-auto: create-drop
  datasource:
    url: jdbc:postgresql://localhost:5432/webchat
    username: webchat
    password: webchat123

---
# Profile para produção
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    hibernate:
      ddl-auto: validate
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}

---
# ✅ Profile Docker Corrigido
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    # Usa as variáveis de ambiente fornecidas pelo docker-compose.yml
    # O host é 'postgres', o nome do serviço no Docker.
    url: jdbc:postgresql://${DB_HOST:postgres}:${DB_PORT:5432}/${DB_NAME:webchat}
    username: ${DB_USERNAME:webchat}
    password: ${DB_PASSWORD:webchat123}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update # 'update' é uma boa estratégia para o ambiente Docker.
